/*
 * Copyright Â© 2023 omegarogue
 * SPDX-License-Identifier: AGPL-3.0-or-later
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package main

import (
	"fmt"
	"strings"
)

const (
	// GstStateVoidPending is a GstState of type VoidPending.
	GstStateVoidPending GstState = iota
	// GstStateNull is a GstState of type Null.
	GstStateNull
	// GstStateReady is a GstState of type Ready.
	GstStateReady
	// GstStatePaused is a GstState of type Paused.
	GstStatePaused
	// GstStatePlaying is a GstState of type Playing.
	GstStatePlaying
)

var ErrInvalidGstState = fmt.Errorf("not a valid GstState, try [%s]", strings.Join(_GstStateNames, ", "))

const _GstStateName = "VoidPendingNullReadyPausedPlaying"

var _GstStateNames = []string{
	_GstStateName[0:11],
	_GstStateName[11:15],
	_GstStateName[15:20],
	_GstStateName[20:26],
	_GstStateName[26:33],
}

// GstStateNames returns a list of possible string values of GstState.
func GstStateNames() []string {
	tmp := make([]string, len(_GstStateNames))
	copy(tmp, _GstStateNames)
	return tmp
}

// GstStateValues returns a list of the values for GstState
func GstStateValues() []GstState {
	return []GstState{
		GstStateVoidPending,
		GstStateNull,
		GstStateReady,
		GstStatePaused,
		GstStatePlaying,
	}
}

var _GstStateMap = map[GstState]string{
	GstStateVoidPending: _GstStateName[0:11],
	GstStateNull:        _GstStateName[11:15],
	GstStateReady:       _GstStateName[15:20],
	GstStatePaused:      _GstStateName[20:26],
	GstStatePlaying:     _GstStateName[26:33],
}

// String implements the Stringer interface.
func (x GstState) String() string {
	if str, ok := _GstStateMap[x]; ok {
		return str
	}
	return fmt.Sprintf("GstState(%d)", x)
}

var _GstStateValue = map[string]GstState{
	_GstStateName[0:11]:  GstStateVoidPending,
	_GstStateName[11:15]: GstStateNull,
	_GstStateName[15:20]: GstStateReady,
	_GstStateName[20:26]: GstStatePaused,
	_GstStateName[26:33]: GstStatePlaying,
}

// ParseGstState attempts to convert a string to a GstState.
func ParseGstState(name string) (GstState, error) {
	if x, ok := _GstStateValue[name]; ok {
		return x, nil
	}
	return GstState(0), fmt.Errorf("%s is %w", name, ErrInvalidGstState)
}

const (
	// GstStateChangeReturnFailure is a GstStateChangeReturn of type Failure.
	GstStateChangeReturnFailure GstStateChangeReturn = iota
	// GstStateChangeReturnSuccess is a GstStateChangeReturn of type Success.
	GstStateChangeReturnSuccess
	// GstStateChangeReturnAsync is a GstStateChangeReturn of type Async.
	GstStateChangeReturnAsync
	// GstStateChangeReturnNoPreRoll is a GstStateChangeReturn of type NoPreRoll.
	GstStateChangeReturnNoPreRoll
)

var ErrInvalidGstStateChangeReturn = fmt.Errorf("not a valid GstStateChangeReturn, try [%s]", strings.Join(_GstStateChangeReturnNames, ", "))

const _GstStateChangeReturnName = "FailureSuccessAsyncNoPreRoll"

var _GstStateChangeReturnNames = []string{
	_GstStateChangeReturnName[0:7],
	_GstStateChangeReturnName[7:14],
	_GstStateChangeReturnName[14:19],
	_GstStateChangeReturnName[19:28],
}

// GstStateChangeReturnNames returns a list of possible string values of GstStateChangeReturn.
func GstStateChangeReturnNames() []string {
	tmp := make([]string, len(_GstStateChangeReturnNames))
	copy(tmp, _GstStateChangeReturnNames)
	return tmp
}

// GstStateChangeReturnValues returns a list of the values for GstStateChangeReturn
func GstStateChangeReturnValues() []GstStateChangeReturn {
	return []GstStateChangeReturn{
		GstStateChangeReturnFailure,
		GstStateChangeReturnSuccess,
		GstStateChangeReturnAsync,
		GstStateChangeReturnNoPreRoll,
	}
}

var _GstStateChangeReturnMap = map[GstStateChangeReturn]string{
	GstStateChangeReturnFailure:   _GstStateChangeReturnName[0:7],
	GstStateChangeReturnSuccess:   _GstStateChangeReturnName[7:14],
	GstStateChangeReturnAsync:     _GstStateChangeReturnName[14:19],
	GstStateChangeReturnNoPreRoll: _GstStateChangeReturnName[19:28],
}

// String implements the Stringer interface.
func (x GstStateChangeReturn) String() string {
	if str, ok := _GstStateChangeReturnMap[x]; ok {
		return str
	}
	return fmt.Sprintf("GstStateChangeReturn(%d)", x)
}

var _GstStateChangeReturnValue = map[string]GstStateChangeReturn{
	_GstStateChangeReturnName[0:7]:   GstStateChangeReturnFailure,
	_GstStateChangeReturnName[7:14]:  GstStateChangeReturnSuccess,
	_GstStateChangeReturnName[14:19]: GstStateChangeReturnAsync,
	_GstStateChangeReturnName[19:28]: GstStateChangeReturnNoPreRoll,
}

// ParseGstStateChangeReturn attempts to convert a string to a GstStateChangeReturn.
func ParseGstStateChangeReturn(name string) (GstStateChangeReturn, error) {
	if x, ok := _GstStateChangeReturnValue[name]; ok {
		return x, nil
	}
	return GstStateChangeReturn(0), fmt.Errorf("%s is %w", name, ErrInvalidGstStateChangeReturn)
}
