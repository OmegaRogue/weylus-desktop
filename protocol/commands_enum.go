/*
 * Copyright Â© 2023 omegarogue
 * SPDX-License-Identifier: AGPL-3.0-or-later
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */

// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package protocol

import (
	"fmt"
	"strings"
)

const (
	// WeylusCommandTryGetFrame is a WeylusCommand of type TryGetFrame.
	WeylusCommandTryGetFrame WeylusCommand = "TryGetFrame"
	// WeylusCommandGetCapturableList is a WeylusCommand of type GetCapturableList.
	WeylusCommandGetCapturableList WeylusCommand = "GetCapturableList"
	// WeylusCommandConfig is a WeylusCommand of type Config.
	WeylusCommandConfig WeylusCommand = "Config"
	// WeylusCommandKeyboardEvent is a WeylusCommand of type KeyboardEvent.
	WeylusCommandKeyboardEvent WeylusCommand = "KeyboardEvent"
	// WeylusCommandPointerEvent is a WeylusCommand of type PointerEvent.
	WeylusCommandPointerEvent WeylusCommand = "PointerEvent"
	// WeylusCommandWheelEvent is a WeylusCommand of type WheelEvent.
	WeylusCommandWheelEvent WeylusCommand = "WheelEvent"
)

var ErrInvalidWeylusCommand = fmt.Errorf("not a valid WeylusCommand, try [%s]", strings.Join(_WeylusCommandNames, ", "))

var _WeylusCommandNames = []string{
	string(WeylusCommandTryGetFrame),
	string(WeylusCommandGetCapturableList),
	string(WeylusCommandConfig),
	string(WeylusCommandKeyboardEvent),
	string(WeylusCommandPointerEvent),
	string(WeylusCommandWheelEvent),
}

// WeylusCommandNames returns a list of possible string values of WeylusCommand.
func WeylusCommandNames() []string {
	tmp := make([]string, len(_WeylusCommandNames))
	copy(tmp, _WeylusCommandNames)
	return tmp
}

// WeylusCommandValues returns a list of the values for WeylusCommand
func WeylusCommandValues() []WeylusCommand {
	return []WeylusCommand{
		WeylusCommandTryGetFrame,
		WeylusCommandGetCapturableList,
		WeylusCommandConfig,
		WeylusCommandKeyboardEvent,
		WeylusCommandPointerEvent,
		WeylusCommandWheelEvent,
	}
}

// String implements the Stringer interface.
func (x WeylusCommand) String() string {
	return string(x)
}

// String implements the Stringer interface.
func (x WeylusCommand) IsValid() bool {
	_, err := ParseWeylusCommand(string(x))
	return err == nil
}

var _WeylusCommandValue = map[string]WeylusCommand{
	"TryGetFrame":       WeylusCommandTryGetFrame,
	"GetCapturableList": WeylusCommandGetCapturableList,
	"Config":            WeylusCommandConfig,
	"KeyboardEvent":     WeylusCommandKeyboardEvent,
	"PointerEvent":      WeylusCommandPointerEvent,
	"WheelEvent":        WeylusCommandWheelEvent,
}

// ParseWeylusCommand attempts to convert a string to a WeylusCommand.
func ParseWeylusCommand(name string) (WeylusCommand, error) {
	if x, ok := _WeylusCommandValue[name]; ok {
		return x, nil
	}
	return WeylusCommand(""), fmt.Errorf("%s is %w", name, ErrInvalidWeylusCommand)
}

// MarshalText implements the text marshaller method.
func (x WeylusCommand) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *WeylusCommand) UnmarshalText(text []byte) error {
	tmp, err := ParseWeylusCommand(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
