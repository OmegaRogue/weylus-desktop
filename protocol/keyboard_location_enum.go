// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package protocol

import (
	"fmt"
	"strings"
)

const (
	// KeyboardLocationStandard is a KeyboardLocation of type Standard.
	KeyboardLocationStandard KeyboardLocation = iota
	// KeyboardLocationLeft is a KeyboardLocation of type Left.
	KeyboardLocationLeft
	// KeyboardLocationRight is a KeyboardLocation of type Right.
	KeyboardLocationRight
	// KeyboardLocationNumpad is a KeyboardLocation of type Numpad.
	KeyboardLocationNumpad
)

var ErrInvalidKeyboardLocation = fmt.Errorf("not a valid KeyboardLocation, try [%s]", strings.Join(_KeyboardLocationNames, ", "))

const _KeyboardLocationName = "standardleftrightnumpad"

var _KeyboardLocationNames = []string{
	_KeyboardLocationName[0:8],
	_KeyboardLocationName[8:12],
	_KeyboardLocationName[12:17],
	_KeyboardLocationName[17:23],
}

// KeyboardLocationNames returns a list of possible string values of KeyboardLocation.
func KeyboardLocationNames() []string {
	tmp := make([]string, len(_KeyboardLocationNames))
	copy(tmp, _KeyboardLocationNames)
	return tmp
}

// KeyboardLocationValues returns a list of the values for KeyboardLocation
func KeyboardLocationValues() []KeyboardLocation {
	return []KeyboardLocation{
		KeyboardLocationStandard,
		KeyboardLocationLeft,
		KeyboardLocationRight,
		KeyboardLocationNumpad,
	}
}

var _KeyboardLocationMap = map[KeyboardLocation]string{
	KeyboardLocationStandard: _KeyboardLocationName[0:8],
	KeyboardLocationLeft:     _KeyboardLocationName[8:12],
	KeyboardLocationRight:    _KeyboardLocationName[12:17],
	KeyboardLocationNumpad:   _KeyboardLocationName[17:23],
}

// String implements the Stringer interface.
func (x KeyboardLocation) String() string {
	if str, ok := _KeyboardLocationMap[x]; ok {
		return str
	}
	return fmt.Sprintf("KeyboardLocation(%d)", x)
}

var _KeyboardLocationValue = map[string]KeyboardLocation{
	_KeyboardLocationName[0:8]:   KeyboardLocationStandard,
	_KeyboardLocationName[8:12]:  KeyboardLocationLeft,
	_KeyboardLocationName[12:17]: KeyboardLocationRight,
	_KeyboardLocationName[17:23]: KeyboardLocationNumpad,
}

// ParseKeyboardLocation attempts to convert a string to a KeyboardLocation.
func ParseKeyboardLocation(name string) (KeyboardLocation, error) {
	if x, ok := _KeyboardLocationValue[name]; ok {
		return x, nil
	}
	return KeyboardLocation(0), fmt.Errorf("%s is %w", name, ErrInvalidKeyboardLocation)
}

// MarshalText implements the text marshaller method.
func (x KeyboardLocation) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *KeyboardLocation) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseKeyboardLocation(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
