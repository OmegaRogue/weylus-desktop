// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package protocol

import (
	"fmt"
	"strings"
)

const (
	// PointerEventTypeDown is a PointerEventType of type down.
	PointerEventTypeDown PointerEventType = "pointerdown"
	// PointerEventTypeUp is a PointerEventType of type up.
	PointerEventTypeUp PointerEventType = "pointerup"
	// PointerEventTypeCancel is a PointerEventType of type cancel.
	PointerEventTypeCancel PointerEventType = "pointercancel"
	// PointerEventTypeMove is a PointerEventType of type move.
	PointerEventTypeMove PointerEventType = "pointermove"
)

var ErrInvalidPointerEventType = fmt.Errorf("not a valid PointerEventType, try [%s]", strings.Join(_PointerEventTypeNames, ", "))

var _PointerEventTypeNames = []string{
	string(PointerEventTypeDown),
	string(PointerEventTypeUp),
	string(PointerEventTypeCancel),
	string(PointerEventTypeMove),
}

// PointerEventTypeNames returns a list of possible string values of PointerEventType.
func PointerEventTypeNames() []string {
	tmp := make([]string, len(_PointerEventTypeNames))
	copy(tmp, _PointerEventTypeNames)
	return tmp
}

// PointerEventTypeValues returns a list of the values for PointerEventType
func PointerEventTypeValues() []PointerEventType {
	return []PointerEventType{
		PointerEventTypeDown,
		PointerEventTypeUp,
		PointerEventTypeCancel,
		PointerEventTypeMove,
	}
}

// String implements the Stringer interface.
func (x PointerEventType) String() string {
	return string(x)
}

// String implements the Stringer interface.
func (x PointerEventType) IsValid() bool {
	_, err := ParsePointerEventType(string(x))
	return err == nil
}

var _PointerEventTypeValue = map[string]PointerEventType{
	"pointerdown":   PointerEventTypeDown,
	"pointerup":     PointerEventTypeUp,
	"pointercancel": PointerEventTypeCancel,
	"pointermove":   PointerEventTypeMove,
}

// ParsePointerEventType attempts to convert a string to a PointerEventType.
func ParsePointerEventType(name string) (PointerEventType, error) {
	if x, ok := _PointerEventTypeValue[name]; ok {
		return x, nil
	}
	return PointerEventType(""), fmt.Errorf("%s is %w", name, ErrInvalidPointerEventType)
}

// MarshalText implements the text marshaller method.
func (x PointerEventType) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *PointerEventType) UnmarshalText(text []byte) error {
	tmp, err := ParsePointerEventType(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
