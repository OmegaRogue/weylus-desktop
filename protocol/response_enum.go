/*
 * Copyright Â© 2023 omegarogue
 * SPDX-License-Identifier: AGPL-3.0-or-later
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */

// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package protocol

import (
	"fmt"
	"strings"
)

const (
	// WeylusResponseNewVideo is a WeylusResponse of type NewVideo.
	WeylusResponseNewVideo WeylusResponse = "NewVideo"
	// WeylusResponseCapturableList is a WeylusResponse of type CapturableList.
	WeylusResponseCapturableList WeylusResponse = "CapturableList"
	// WeylusResponseConfigOk is a WeylusResponse of type ConfigOk.
	WeylusResponseConfigOk WeylusResponse = "ConfigOk"
	// WeylusResponseConfigError is a WeylusResponse of type ConfigError.
	WeylusResponseConfigError WeylusResponse = "ConfigError"
	// WeylusResponseError is a WeylusResponse of type Error.
	WeylusResponseError WeylusResponse = "Error"
)

var ErrInvalidWeylusResponse = fmt.Errorf("not a valid WeylusResponse, try [%s]", strings.Join(_WeylusResponseNames, ", "))

var _WeylusResponseNames = []string{
	string(WeylusResponseNewVideo),
	string(WeylusResponseCapturableList),
	string(WeylusResponseConfigOk),
	string(WeylusResponseConfigError),
	string(WeylusResponseError),
}

// WeylusResponseNames returns a list of possible string values of WeylusResponse.
func WeylusResponseNames() []string {
	tmp := make([]string, len(_WeylusResponseNames))
	copy(tmp, _WeylusResponseNames)
	return tmp
}

// WeylusResponseValues returns a list of the values for WeylusResponse
func WeylusResponseValues() []WeylusResponse {
	return []WeylusResponse{
		WeylusResponseNewVideo,
		WeylusResponseCapturableList,
		WeylusResponseConfigOk,
		WeylusResponseConfigError,
		WeylusResponseError,
	}
}

// String implements the Stringer interface.
func (x WeylusResponse) String() string {
	return string(x)
}

// String implements the Stringer interface.
func (x WeylusResponse) IsValid() bool {
	_, err := ParseWeylusResponse(string(x))
	return err == nil
}

var _WeylusResponseValue = map[string]WeylusResponse{
	"NewVideo":       WeylusResponseNewVideo,
	"CapturableList": WeylusResponseCapturableList,
	"ConfigOk":       WeylusResponseConfigOk,
	"ConfigError":    WeylusResponseConfigError,
	"Error":          WeylusResponseError,
}

// ParseWeylusResponse attempts to convert a string to a WeylusResponse.
func ParseWeylusResponse(name string) (WeylusResponse, error) {
	if x, ok := _WeylusResponseValue[name]; ok {
		return x, nil
	}
	return WeylusResponse(""), fmt.Errorf("%s is %w", name, ErrInvalidWeylusResponse)
}

// MarshalText implements the text marshaller method.
func (x WeylusResponse) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *WeylusResponse) UnmarshalText(text []byte) error {
	tmp, err := ParseWeylusResponse(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
